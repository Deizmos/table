{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst tableDataSlice = createSlice({\n  name: 'tableData',\n  initialState: {\n    isLoading: true,\n    data: [],\n    allData: [],\n    filterData: [],\n    pagination: {\n      total: 0,\n      count: 1\n    }\n  },\n  reducers: {\n    /**\n     * Функция которая записывает в store данные для таблицы.\n     * @param state \n     * @param action - данные типа tableDataType[]\n     * @returns \n     */\n    setTableData(state, action) {\n      return { ...state,\n        allData: action.payload,\n        filterData: action.payload,\n        data: action.payload.slice(0, 10),\n        pagination: { ...state.pagination,\n          total: Math.ceil(action.payload.length / 10)\n        }\n      };\n    },\n\n    /**\n     * Функция предназначена для фильтрации массива данных для таблицы.\n     * @param state \n     * @param action - данные для фильтрации\n     * @returns \n     */\n    setFilterData(state, action) {\n      const filterData = state.allData.filter(d => String(d.id).includes(action.payload) || String(d.order_type.name).includes(action.payload) || String(d.account.name).includes(action.payload) || String(d.terminal.name).includes(action.payload) || String(d.created_user.surname).includes(action.payload));\n      const data = filterData.slice(0, 10);\n      return { ...state,\n        data,\n        filterData,\n        pagination: { ...state.pagination,\n          total: Math.ceil(filterData.length / 10)\n        }\n      };\n    },\n\n    /**\n     * Функция которая задаёт активную страницу пагинации.\n     * @param state \n     * @param action - номер страницы\n     * @returns \n     */\n    setPaginationCount(state, action) {\n      const startIndex = (action.payload - 1) * 10;\n      return { ...state,\n        data: state.filterData.slice(startIndex, startIndex + 10),\n        pagination: { ...state.pagination,\n          count: action.payload\n        }\n      };\n    },\n\n    /**\n     * Функция для записи состояния загрузки\n     * @param state \n     * @param action - данные типа boolean\n     * @returns \n     */\n    setLoading(state, action) {\n      return { ...state,\n        isLoading: action.payload\n      };\n    }\n\n  }\n});\nexport const {\n  setTableData,\n  setPaginationCount,\n  setLoading,\n  setFilterData\n} = tableDataSlice.actions;\nexport default tableDataSlice.reducer;","map":{"version":3,"names":["createSlice","tableDataSlice","name","initialState","isLoading","data","allData","filterData","pagination","total","count","reducers","setTableData","state","action","payload","slice","Math","ceil","length","setFilterData","filter","d","String","id","includes","order_type","account","terminal","created_user","surname","setPaginationCount","startIndex","setLoading","actions","reducer"],"sources":["/Users/mikhailfilippenko/dev/table/src/store/reducers/tableData.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nimport { tableDataType } from '../../store/types';\n\ninterface Action<P> {\n    payload: P;\n}\n\nconst tableDataSlice = createSlice({\n    name: 'tableData',\n    initialState: {\n        isLoading: true,\n        data: [],\n        allData: [],\n        filterData: [],\n        pagination: {\n            total: 0,\n            count: 1,\n        }\n    },\n    reducers: {\n        /**\n         * Функция которая записывает в store данные для таблицы.\n         * @param state \n         * @param action - данные типа tableDataType[]\n         * @returns \n         */\n        setTableData(state, action: Action<tableDataType[]>) {\n            return {\n                ...state,\n                allData: action.payload,\n                filterData: action.payload,\n                data: action.payload.slice(0, 10),\n                pagination: {\n                    ...state.pagination,\n                    total: Math.ceil(action.payload.length / 10),\n                }\n            }\n        },\n        /**\n         * Функция предназначена для фильтрации массива данных для таблицы.\n         * @param state \n         * @param action - данные для фильтрации\n         * @returns \n         */\n        setFilterData(state, action: Action<string>) {\n            const filterData = state.allData.filter((d) =>\n                String(d.id).includes(action.payload)\n                || String(d.order_type.name).includes(action.payload)\n                || String(d.account.name).includes(action.payload)\n                || String(d.terminal.name).includes(action.payload)\n                || String(d.created_user.surname).includes(action.payload));\n            const data = filterData.slice(0, 10);\n            return {\n                ...state,\n                data,\n                filterData,\n                pagination: {\n                    ...state.pagination,\n                    total: Math.ceil(filterData.length / 10),\n                }\n            }\n        },\n        /**\n         * Функция которая задаёт активную страницу пагинации.\n         * @param state \n         * @param action - номер страницы\n         * @returns \n         */\n        setPaginationCount(state, action: Action<number>) {\n            const startIndex = (action.payload - 1) * 10;\n            return {\n                ...state,\n                data: state.filterData.slice(startIndex, startIndex + 10),\n                pagination: {\n                    ...state.pagination,\n                    count: action.payload,\n                }\n            }\n        },\n        /**\n         * Функция для записи состояния загрузки\n         * @param state \n         * @param action - данные типа boolean\n         * @returns \n         */\n        setLoading(state, action: Action<boolean>) {\n            return {\n                ...state,\n                isLoading: action.payload\n            }\n        },\n    }\n})\n\nexport const {\n    setTableData,\n    setPaginationCount,\n    setLoading,\n    setFilterData,\n} = tableDataSlice.actions;\nexport default tableDataSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}